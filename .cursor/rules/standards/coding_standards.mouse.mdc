---
description: 
globs: *.js,*.ts,*.py,*.java,*.cs,*.go,*.rb,*.php,*.html,*.css,*.scss,*.jsx,*.tsx,*.json,*.yml,*.yaml,*.sql,*.sh,*.ps1,Dockerfile,*.ipynb
alwaysApply: false
---

---

# 4. Standards & Quality Assurance: Coding Standards (Mouse Protocol)

> **Rationale:** Defines the non-negotiable quality, security, and maintainability expectations for all code produced or modified by the Agent. Strict adherence ensures consistency, reduces errors, enhances collaboration, and aligns with professional software development practices. The Agent is expected to internalize these standards and apply them proactively and rigorously.

## 4.1 Code Quality & Conventions (Mandatory Adherence)
*   **Project-Specific & Language Idiomatic Standards:**
    *   The Agent MUST meticulously adhere to any project-specific coding standards, linting rules (e.g., ESLint, Pylint, Checkstyle, RuboCop, SwiftLint), and formatting guidelines (e.g., Prettier, Black, Spotless, gofmt, rustfmt) defined and accessible within the project (e.g., via `.eslintrc.js`, `prettier.config.js`, `pyproject.toml`, `checkstyle.xml`, `.swiftlint.yml`).
    *   **Agent Action:** Before coding, Agent MUST scan for such configuration files. If found, Agent configures its internal generation process to comply strictly. If not found, Agent MUST use widely accepted community best practices and idiomatic conventions for the specific language and its version, prioritizing clarity, security, and maintainability. Agent logs which standards (project or default) are being applied.
*   **Clarity, Readability & Simplicity (KISS Principle):**
    *   Code MUST be exceptionally clear, self-documenting where possible, and easily understandable by another human developer or a future instance of the Agent.
    *   Employ meaningful, descriptive, and consistent naming conventions for variables, functions, classes, modules, etc. (e.g., `camelCase` for JS/Java variables/functions, `PascalCase` for classes, `snake_case` for Python variables/functions).
    *   Avoid overly complex, nested, or "clever" logic if simpler, more straightforward alternatives exist that achieve the same functional outcome (refer to `@mouse/standards/guiding_software_principles.mouse.mdc#kiss`).
*   **Maintainability & Modularity (SRP, DRY Principles):**
    *   Code MUST be structured for ease of future modification, extension, and debugging.
    *   Follow modular design principles: Create small, focused functions/methods/classes that perform a single, well-defined task (Single Responsibility Principle - SRP).
    *   Aggressively avoid code duplication (Don't Repeat Yourself - DRY). Abstract common logic into reusable functions, classes, or modules. Reference `@mouse/standards/guiding_software_principles.mouse.mdc`.
*   **Commenting & Documentation (See also `@mouse/standards/documentation_standards.mouse.mdc`):**
    *   Provide clear, concise comments for complex logic, non-obvious design decisions, workarounds, or sections of code that have known limitations (e.g., `// HACK: Temporary workaround for API bug XYZ-123. TODO: Remove when fixed.`).
    *   Public APIs (functions, classes, methods exposed for external use) MUST have comprehensive docstrings/API comments detailing purpose, parameters, return values, and exceptions.
*   **Error Handling & Resilience (Robustness):**
    *   Implement robust, specific error handling for all anticipated failure conditions (e.g., invalid inputs, I/O errors, API failures, unmet preconditions).
    *   Use language-specific exception handling mechanisms correctly. Catch specific exceptions rather than generic ones, unless intentionally re-throwing with added context.
    *   Provide meaningful error messages that help in diagnosing the problem. Log errors appropriately (see logging standards).
    *   Consider graceful degradation or fallback mechanisms where appropriate.
*   **Security Best Practices (Critical - Principle of Least Privilege, Secure by Design):**
    *   Agent MUST be actively mindful of common security vulnerabilities relevant to the language, framework, and context (e.g., OWASP Top 10: SQL Injection, XSS, CSRF, Insecure Deserialization, Broken Access Control, etc.).
    *   **Input Validation:** All external inputs (from User, files, APIs, environment variables) MUST be validated and sanitized before use, especially if used in database queries, file paths, or executed commands.
    *   **Output Encoding:** Ensure outputs are correctly encoded to prevent injection attacks (e.g., HTML encoding for web display).
    *   **Secrets Management:** NEVER hardcode sensitive information (credentials, API keys, tokens). Use environment variables, references to secure vault entries, or project-configured secret management solutions. Agent MUST flag if a task implies hardcoding secrets and request User guidance on secure handling.
    *   **Principle of Least Privilege:** Code should operate with the minimum necessary permissions.
    *   **Dependency Security:** Be aware of known vulnerabilities in third-party libraries. If adding new dependencies, reference `@mouse/advanced/security_scanning.mouse.mdc` if enabled.
*   **Performance Considerations:**
    *   While clarity and correctness are primary, Agent should avoid known, blatantly inefficient algorithms or patterns if efficient alternatives are readily available and do not significantly compromise clarity or maintainability for the given task scale.
    *   Significant performance optimization should be a dedicated task with clear performance targets and profiling. Avoid premature optimization.
*   **Tooling Integration & Verification:**
    *   If linters, formatters, or static analysis tools are configured in the project, the Agent MUST attempt to run them on all generated/modified code as a mandatory verification step before considering a sub-task "Done".
    *   Results (pass/fail, specific errors/warnings) MUST be logged in the `ExecutionLog` of the relevant sub-task.
    *   If errors/warnings are found, Agent MUST attempt to automatically fix them if safe and within its capability. If unable to fix, or if fixes are non-trivial, Agent logs the persistent issues and may mark the sub-task `Blocked` pending User guidance, especially if violations are critical.
*   **Logging Adherence:** All actions related to applying these standards (e.g., "Ran Prettier formatter on `file.js` - 5 changes made.", "Fixed 3 Pylint C0301 (line-too-long) errors in `module.py`.") MUST be logged in the `ExecutionLog` of the relevant sub-task.