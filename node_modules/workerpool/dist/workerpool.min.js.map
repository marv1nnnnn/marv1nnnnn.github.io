{"version":3,"file":"workerpool.min.js","sources":["../src/environment.js","../src/Promise.js","../src/validateOptions.js","../src/WorkerHandler.js","../src/generated/embeddedWorker.js","../src/Pool.js","../src/debug-port-allocator.js","../src/transfer.js","../src/worker.js","../src/index.js"],"sourcesContent":["\n// source: https://github.com/flexdinesh/browser-or-node\nvar isNode = function (nodeProcess) {\n  return (\n    typeof nodeProcess !== 'undefined' &&\n    nodeProcess.versions != null &&\n    nodeProcess.versions.node != null\n  );\n}\nmodule.exports.isNode = isNode\n\n// determines the JavaScript platform: browser or node\nmodule.exports.platform = typeof process !== 'undefined' && isNode(process)\n  ? 'node'\n  : 'browser';\n\n// determines whether the code is running in main thread or not\n// note that in node.js we have to check both worker_thread and child_process\nvar worker_threads = module.exports.platform === 'node' && require('worker_threads');\nmodule.exports.isMainThread = module.exports.platform === 'node'\n  ? ((!worker_threads || worker_threads.isMainThread) && !process.connected)\n  : typeof Window !== 'undefined';\n\n// determines the number of cpus available\nmodule.exports.cpus = module.exports.platform === 'browser'\n  ? self.navigator.hardwareConcurrency\n  : require('os').cpus().length;\n\n","'use strict';\n\n/**\n * Promise\n *\n * Inspired by https://gist.github.com/RubaXa/8501359 from RubaXa <trash@rubaxa.org>\n *\n * @param {Function} handler   Called as handler(resolve: Function, reject: Function)\n * @param {Promise} [parent]   Parent promise for propagation of cancel and timeout\n */\nfunction Promise(handler, parent) {\n  var me = this;\n\n  if (!(this instanceof Promise)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  if (typeof handler !== 'function') {\n    throw new SyntaxError('Function parameter handler(resolve, reject) missing');\n  }\n\n  var _onSuccess = [];\n  var _onFail = [];\n\n  // status\n  this.resolved = false;\n  this.rejected = false;\n  this.pending = true;\n\n  /**\n   * Process onSuccess and onFail callbacks: add them to the queue.\n   * Once the promise is resolve, the function _promise is replace.\n   * @param {Function} onSuccess\n   * @param {Function} onFail\n   * @private\n   */\n  var _process = function (onSuccess, onFail) {\n    _onSuccess.push(onSuccess);\n    _onFail.push(onFail);\n  };\n\n  /**\n   * Add an onSuccess callback and optionally an onFail callback to the Promise\n   * @param {Function} onSuccess\n   * @param {Function} [onFail]\n   * @returns {Promise} promise\n   */\n  this.then = function (onSuccess, onFail) {\n    return new Promise(function (resolve, reject) {\n      var s = onSuccess ? _then(onSuccess, resolve, reject) : resolve;\n      var f = onFail    ? _then(onFail,    resolve, reject) : reject;\n\n      _process(s, f);\n    }, me);\n  };\n\n  /**\n   * Resolve the promise\n   * @param {*} result\n   * @type {Function}\n   */\n  var _resolve = function (result) {\n    // update status\n    me.resolved = true;\n    me.rejected = false;\n    me.pending = false;\n\n    _onSuccess.forEach(function (fn) {\n      fn(result);\n    });\n\n    _process = function (onSuccess, onFail) {\n      onSuccess(result);\n    };\n\n    _resolve = _reject = function () { };\n\n    return me;\n  };\n\n  /**\n   * Reject the promise\n   * @param {Error} error\n   * @type {Function}\n   */\n  var _reject = function (error) {\n    // update status\n    me.resolved = false;\n    me.rejected = true;\n    me.pending = false;\n\n    _onFail.forEach(function (fn) {\n      fn(error);\n    });\n\n    _process = function (onSuccess, onFail) {\n      onFail(error);\n    };\n\n    _resolve = _reject = function () { }\n\n    return me;\n  };\n\n  /**\n   * Cancel te promise. This will reject the promise with a CancellationError\n   * @returns {Promise} self\n   */\n  this.cancel = function () {\n    if (parent) {\n      parent.cancel();\n    }\n    else {\n      _reject(new CancellationError());\n    }\n\n    return me;\n  };\n\n  /**\n   * Set a timeout for the promise. If the promise is not resolved within\n   * the time, the promise will be cancelled and a TimeoutError is thrown.\n   * If the promise is resolved in time, the timeout is removed.\n   * @param {number} delay     Delay in milliseconds\n   * @returns {Promise} self\n   */\n  this.timeout = function (delay) {\n    if (parent) {\n      parent.timeout(delay);\n    }\n    else {\n      var timer = setTimeout(function () {\n        _reject(new TimeoutError('Promise timed out after ' + delay + ' ms'));\n      }, delay);\n\n      me.always(function () {\n        clearTimeout(timer);\n      });\n    }\n\n    return me;\n  };\n\n  // attach handler passing the resolve and reject functions\n  handler(function (result) {\n    _resolve(result);\n  }, function (error) {\n    _reject(error);\n  });\n}\n\n/**\n * Execute given callback, then call resolve/reject based on the returned result\n * @param {Function} callback\n * @param {Function} resolve\n * @param {Function} reject\n * @returns {Function}\n * @private\n */\nfunction _then(callback, resolve, reject) {\n  return function (result) {\n    try {\n      var res = callback(result);\n      if (res && typeof res.then === 'function' && typeof res['catch'] === 'function') {\n        // method returned a promise\n        res.then(resolve, reject);\n      }\n      else {\n        resolve(res);\n      }\n    }\n    catch (error) {\n      reject(error);\n    }\n  }\n}\n\n/**\n * Add an onFail callback to the Promise\n * @param {Function} onFail\n * @returns {Promise} promise\n */\nPromise.prototype['catch'] = function (onFail) {\n  return this.then(null, onFail);\n};\n\n// TODO: add support for Promise.catch(Error, callback)\n// TODO: add support for Promise.catch(Error, Error, callback)\n\n/**\n * Execute given callback when the promise either resolves or rejects.\n * @param {Function} fn\n * @returns {Promise} promise\n */\nPromise.prototype.always = function (fn) {\n  return this.then(fn, fn);\n};\n\n/**\n * Create a promise which resolves when all provided promises are resolved,\n * and fails when any of the promises resolves.\n * @param {Promise[]} promises\n * @returns {Promise} promise\n */\nPromise.all = function (promises){\n  return new Promise(function (resolve, reject) {\n    var remaining = promises.length,\n        results = [];\n\n    if (remaining) {\n      promises.forEach(function (p, i) {\n        p.then(function (result) {\n          results[i] = result;\n          remaining--;\n          if (remaining == 0) {\n            resolve(results);\n          }\n        }, function (error) {\n          remaining = 0;\n          reject(error);\n        });\n      });\n    }\n    else {\n      resolve(results);\n    }\n  });\n};\n\n/**\n * Create a promise resolver\n * @returns {{promise: Promise, resolve: Function, reject: Function}} resolver\n */\nPromise.defer = function () {\n  var resolver = {};\n\n  resolver.promise = new Promise(function (resolve, reject) {\n    resolver.resolve = resolve;\n    resolver.reject = reject;\n  });\n\n  return resolver;\n};\n\n/**\n * Create a cancellation error\n * @param {String} [message]\n * @extends Error\n */\nfunction CancellationError(message) {\n  this.message = message || 'promise cancelled';\n  this.stack = (new Error()).stack;\n}\n\nCancellationError.prototype = new Error();\nCancellationError.prototype.constructor = Error;\nCancellationError.prototype.name = 'CancellationError';\n\nPromise.CancellationError = CancellationError;\n\n\n/**\n * Create a timeout error\n * @param {String} [message]\n * @extends Error\n */\nfunction TimeoutError(message) {\n  this.message = message || 'timeout exceeded';\n  this.stack = (new Error()).stack;\n}\n\nTimeoutError.prototype = new Error();\nTimeoutError.prototype.constructor = Error;\nTimeoutError.prototype.name = 'TimeoutError';\n\nPromise.TimeoutError = TimeoutError;\n\n\nmodule.exports = Promise;\n","/**\n * Validate that the object only contains known option names\n * - Throws an error when unknown options are detected\n * - Throws an error when some of the allowed options are attached\n * @param {Object | undefined} options\n * @param {string[]} allowedOptionNames\n * @param {string} objectName\n * @retrun {Object} Returns the original options\n */\nexports.validateOptions = function validateOptions(options, allowedOptionNames, objectName) {\n  if (!options) {\n    return\n  }\n\n  var optionNames = options ?  Object.keys(options) : []\n\n  // check for unknown properties\n  var unknownOptionName = optionNames.find(optionName => !allowedOptionNames.includes(optionName))\n  if (unknownOptionName) {\n    throw new Error('Object \"' + objectName + '\" contains an unknown option \"' + unknownOptionName + '\"')\n  }\n\n  // check for inherited properties which are not present on the object itself\n  var illegalOptionName = allowedOptionNames.find(allowedOptionName => {\n    return Object.prototype[allowedOptionName] && !optionNames.includes(allowedOptionName)\n  })\n  if (illegalOptionName) {\n    throw new Error('Object \"' + objectName + '\" contains an inherited option \"' + illegalOptionName + '\" which is ' +\n      'not defined in the object itself but in its prototype. Only plain objects are allowed. ' +\n      'Please remove the option from the prototype or override it with a value \"undefined\".')\n  }\n\n  return options\n}\n\n// source: https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\nexports.workerOptsNames = [\n  'credentials', 'name', 'type' ]\n\n// source: https://nodejs.org/api/child_process.html#child_processforkmodulepath-args-options\nexports.forkOptsNames = [\n  'cwd', 'detached', 'env', 'execPath', 'execArgv', 'gid', 'serialization',\n  'signal', 'killSignal', 'silent', 'stdio', 'uid', 'windowsVerbatimArguments',\n  'timeout'\n]\n\n// source: https://nodejs.org/api/worker_threads.html#new-workerfilename-options\nexports.workerThreadOptsNames = [\n  'argv', 'env', 'eval', 'execArgv', 'stdin', 'stdout', 'stderr', 'workerData',\n  'trackUnmanagedFds', 'transferList', 'resourceLimits', 'name'\n]\n","'use strict';\n\nvar Promise = require('./Promise');\nvar environment = require('./environment');\nconst {validateOptions, forkOptsNames, workerThreadOptsNames, workerOptsNames} = require(\"./validateOptions\");\n\n/**\n * Special message sent by parent which causes a child process worker to terminate itself.\n * Not a \"message object\"; this string is the entire message.\n */\nvar TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\nfunction ensureWorkerThreads() {\n  var WorkerThreads = tryRequireWorkerThreads()\n  if (!WorkerThreads) {\n    throw new Error('WorkerPool: workerType = \\'thread\\' is not supported, Node >= 11.7.0 required')\n  }\n\n  return WorkerThreads;\n}\n\n// check whether Worker is supported by the browser\nfunction ensureWebWorker() {\n  // Workaround for a bug in PhantomJS (Or QtWebkit): https://github.com/ariya/phantomjs/issues/14534\n  if (typeof Worker !== 'function' && (typeof Worker !== 'object' || typeof Worker.prototype.constructor !== 'function')) {\n    throw new Error('WorkerPool: Web Workers not supported');\n  }\n}\n\nfunction tryRequireWorkerThreads() {\n  try {\n    return require('worker_threads');\n  } catch(error) {\n    if (typeof error === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n      // no worker_threads available (old version of node.js)\n      return null;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// get the default worker script\nfunction getDefaultWorker() {\n  if (environment.platform === 'browser') {\n    // test whether the browser supports all features that we need\n    if (typeof Blob === 'undefined') {\n      throw new Error('Blob not supported by the browser');\n    }\n    if (!window.URL || typeof window.URL.createObjectURL !== 'function') {\n      throw new Error('URL.createObjectURL not supported by the browser');\n    }\n\n    // use embedded worker.js\n    var blob = new Blob([require('./generated/embeddedWorker')], {type: 'text/javascript'});\n    return window.URL.createObjectURL(blob);\n  }\n  else {\n    // use external worker.js in current directory\n    return __dirname + '/worker.js';\n  }\n}\n\nfunction setupWorker(script, options) {\n  if (options.workerType === 'web') { // browser only\n    ensureWebWorker();\n    return setupBrowserWorker(script, options.workerOpts, Worker);\n  } else if (options.workerType === 'thread') { // node.js only\n    WorkerThreads = ensureWorkerThreads();\n    return setupWorkerThreadWorker(script, WorkerThreads, options.workerThreadOpts);\n  } else if (options.workerType === 'process' || !options.workerType) { // node.js only\n    return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n  } else { // options.workerType === 'auto' or undefined\n    if (environment.platform === 'browser') {\n      ensureWebWorker();\n      return setupBrowserWorker(script, options.workerOpts, Worker);\n    }\n    else { // environment.platform === 'node'\n      var WorkerThreads = tryRequireWorkerThreads();\n      if (WorkerThreads) {\n        return setupWorkerThreadWorker(script, WorkerThreads, options.workerThreadOpts);\n      } else {\n        return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n      }\n    }\n  }\n}\n\nfunction setupBrowserWorker(script, workerOpts, Worker) {\n  // validate the options right before creating the worker (not when creating the pool)\n  validateOptions(workerOpts, workerOptsNames, 'workerOpts')\n\n  // create the web worker\n  var worker = new Worker(script, workerOpts);\n\n  worker.isBrowserWorker = true;\n  // add node.js API to the web worker\n  worker.on = function (event, callback) {\n    this.addEventListener(event, function (message) {\n      callback(message.data);\n    });\n  };\n  worker.send = function (message, transfer) {\n    this.postMessage(message, transfer);\n  };\n  return worker;\n}\n\nfunction setupWorkerThreadWorker(script, WorkerThreads, workerThreadOptions) {\n  // validate the options right before creating the worker thread (not when creating the pool)\n  validateOptions(workerThreadOptions, workerThreadOptsNames, 'workerThreadOpts')\n\n  var worker = new WorkerThreads.Worker(script, {\n    stdout: false, // automatically pipe worker.STDOUT to process.STDOUT\n    stderr: false,  // automatically pipe worker.STDERR to process.STDERR\n    ...workerThreadOptions\n  });\n  worker.isWorkerThread = true;\n  worker.send = function(message, transfer) {\n    this.postMessage(message, transfer);\n  };\n\n  worker.kill = function() {\n    this.terminate();\n    return true;\n  };\n\n  worker.disconnect = function() {\n    this.terminate();\n  };\n\n  return worker;\n}\n\nfunction setupProcessWorker(script, options, child_process) {\n  // validate the options right before creating the child process (not when creating the pool)\n  validateOptions(options.forkOpts, forkOptsNames, 'forkOpts')\n\n  // no WorkerThreads, fallback to sub-process based workers\n  var worker = child_process.fork(\n    script,\n    options.forkArgs,\n    options.forkOpts\n  );\n\n  // ignore transfer argument since it is not supported by process\n  var send = worker.send;\n  worker.send = function (message) {\n    return send.call(worker, message);\n  };\n\n  worker.isChildProcess = true;\n  return worker;\n}\n\n// add debug flags to child processes if the node inspector is active\nfunction resolveForkOptions(opts) {\n  opts = opts || {};\n\n  var processExecArgv = process.execArgv.join(' ');\n  var inspectorActive = processExecArgv.indexOf('--inspect') !== -1;\n  var debugBrk = processExecArgv.indexOf('--debug-brk') !== -1;\n\n  var execArgv = [];\n  if (inspectorActive) {\n    execArgv.push('--inspect=' + opts.debugPort);\n\n    if (debugBrk) {\n      execArgv.push('--debug-brk');\n    }\n  }\n\n  process.execArgv.forEach(function(arg) {\n    if (arg.indexOf('--max-old-space-size') > -1) {\n      execArgv.push(arg)\n    }\n  })\n\n  return Object.assign({}, opts, {\n    forkArgs: opts.forkArgs,\n    forkOpts: Object.assign({}, opts.forkOpts, {\n      execArgv: (opts.forkOpts && opts.forkOpts.execArgv || [])\n      .concat(execArgv)\n    })\n  });\n}\n\n/**\n * Converts a serialized error to Error\n * @param {Object} obj Error that has been serialized and parsed to object\n * @return {Error} The equivalent Error.\n */\nfunction objectToError (obj) {\n  var temp = new Error('')\n  var props = Object.keys(obj)\n\n  for (var i = 0; i < props.length; i++) {\n    temp[props[i]] = obj[props[i]]\n  }\n\n  return temp\n}\n\n/**\n * A WorkerHandler controls a single worker. This worker can be a child process\n * on node.js or a WebWorker in a browser environment.\n * @param {String} [script] If no script is provided, a default worker with a\n *                          function run will be created.\n * @param {WorkerPoolOptions} _options See docs\n * @constructor\n */\nfunction WorkerHandler(script, _options) {\n  var me = this;\n  var options = _options || {};\n\n  this.script = script || getDefaultWorker();\n  this.worker = setupWorker(this.script, options);\n  this.debugPort = options.debugPort;\n  this.forkOpts = options.forkOpts;\n  this.forkArgs = options.forkArgs;\n  this.workerOpts = options.workerOpts;\n  this.workerThreadOpts = options.workerThreadOpts\n  this.workerTerminateTimeout = options.workerTerminateTimeout;\n\n  // The ready message is only sent if the worker.add method is called (And the default script is not used)\n  if (!script) {\n    this.worker.ready = true;\n  }\n\n  // queue for requests that are received before the worker is ready\n  this.requestQueue = [];\n  this.worker.on('message', function (response) {\n    if (me.terminated) {\n      return;\n    }\n    if (typeof response === 'string' && response === 'ready') {\n      me.worker.ready = true;\n      dispatchQueuedRequests();\n    } else {\n      // find the task from the processing queue, and run the tasks callback\n      var id = response.id;\n      var task = me.processing[id];\n      if (task !== undefined) {\n        if (response.isEvent) {\n          if (task.options && typeof task.options.on === 'function') {\n            task.options.on(response.payload);\n          }\n        } else {\n          // remove the task from the queue\n          delete me.processing[id];\n\n          // test if we need to terminate\n          if (me.terminating === true) {\n            // complete worker termination if all tasks are finished\n            me.terminate();\n          }\n\n          // resolve the task's promise\n          if (response.error) {\n            task.resolver.reject(objectToError(response.error));\n          }\n          else {\n            task.resolver.resolve(response.result);\n          }\n        }\n      }\n    }\n  });\n\n  // reject all running tasks on worker error\n  function onError(error) {\n    me.terminated = true;\n\n    for (var id in me.processing) {\n      if (me.processing[id] !== undefined) {\n        me.processing[id].resolver.reject(error);\n      }\n    }\n    me.processing = Object.create(null);\n  }\n\n  // send all queued requests to worker\n  function dispatchQueuedRequests()\n  {\n    for(const request of me.requestQueue.splice(0)) {\n      me.worker.send(request.message, request.transfer);\n    }\n  }\n\n  var worker = this.worker;\n  // listen for worker messages error and exit\n  this.worker.on('error', onError);\n  this.worker.on('exit', function (exitCode, signalCode) {\n    var message = 'Workerpool Worker terminated Unexpectedly\\n';\n\n    message += '    exitCode: `' + exitCode + '`\\n';\n    message += '    signalCode: `' + signalCode + '`\\n';\n\n    message += '    workerpool.script: `' +  me.script + '`\\n';\n    message += '    spawnArgs: `' +  worker.spawnargs + '`\\n';\n    message += '    spawnfile: `' + worker.spawnfile + '`\\n'\n\n    message += '    stdout: `' + worker.stdout + '`\\n'\n    message += '    stderr: `' + worker.stderr + '`\\n'\n\n    onError(new Error(message));\n  });\n\n  this.processing = Object.create(null); // queue with tasks currently in progress\n\n  this.terminating = false;\n  this.terminated = false;\n  this.cleaning = false;\n  this.terminationHandler = null;\n  this.lastId = 0;\n}\n\n/**\n * Get a list with methods available on the worker.\n * @return {Promise.<String[], Error>} methods\n */\nWorkerHandler.prototype.methods = function () {\n  return this.exec('methods');\n};\n\n/**\n * Execute a method with given parameters on the worker\n * @param {String} method\n * @param {Array} [params]\n * @param {{resolve: Function, reject: Function}} [resolver]\n * @param {ExecOptions}  [options]\n * @return {Promise.<*, Error>} result\n */\nWorkerHandler.prototype.exec = function(method, params, resolver, options) {\n  if (!resolver) {\n    resolver = Promise.defer();\n  }\n\n  // generate a unique id for the task\n  var id = ++this.lastId;\n\n  // register a new task as being in progress\n  this.processing[id] = {\n    id: id,\n    resolver: resolver,\n    options: options\n  };\n\n  // build a JSON-RPC request\n  var request = {\n    message: {\n      id: id,\n      method: method,\n      params: params\n    },\n    transfer: options && options.transfer\n  };\n\n  if (this.terminated) {\n    resolver.reject(new Error('Worker is terminated'));\n  } else if (this.worker.ready) {\n    // send the request to the worker\n    this.worker.send(request.message, request.transfer);\n  } else {\n    this.requestQueue.push(request);\n  }\n\n  // on cancellation, force the worker to terminate\n  var me = this;\n  return resolver.promise.catch(function (error) {\n    if (error instanceof Promise.CancellationError || error instanceof Promise.TimeoutError) {\n      // remove this task from the queue. It is already rejected (hence this\n      // catch event), and else it will be rejected again when terminating\n      delete me.processing[id];\n\n      // terminate worker\n      return me.terminateAndNotify(true)\n        .then(function() {\n          throw error;\n        }, function(err) {\n          throw err;\n        });\n    } else {\n      throw error;\n    }\n  })\n};\n\n/**\n * Test whether the worker is processing any tasks or cleaning up before termination.\n * @return {boolean} Returns true if the worker is busy\n */\nWorkerHandler.prototype.busy = function () {\n  return this.cleaning || Object.keys(this.processing).length > 0;\n};\n\n/**\n * Terminate the worker.\n * @param {boolean} [force=false]   If false (default), the worker is terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the worker will be\n *                                  terminated immediately.\n * @param {function} [callback=null] If provided, will be called when process terminates.\n */\nWorkerHandler.prototype.terminate = function (force, callback) {\n  var me = this;\n  if (force) {\n    // cancel all tasks in progress\n    for (var id in this.processing) {\n      if (this.processing[id] !== undefined) {\n        this.processing[id].resolver.reject(new Error('Worker terminated'));\n      }\n    }\n    this.processing = Object.create(null);\n  }\n\n  if (typeof callback === 'function') {\n    this.terminationHandler = callback;\n  }\n  if (!this.busy()) {\n    // all tasks are finished. kill the worker\n    var cleanup = function(err) {\n      me.terminated = true;\n      me.cleaning = false;\n      if (me.worker != null && me.worker.removeAllListeners) {\n        // removeAllListeners is only available for child_process\n        me.worker.removeAllListeners('message');\n      }\n      me.worker = null;\n      me.terminating = false;\n      if (me.terminationHandler) {\n        me.terminationHandler(err, me);\n      } else if (err) {\n        throw err;\n      }\n    }\n\n    if (this.worker) {\n      if (typeof this.worker.kill === 'function') {\n        if (this.worker.killed) {\n          cleanup(new Error('worker already killed!'));\n          return;\n        }\n\n        // child process and worker threads\n        var cleanExitTimeout = setTimeout(function() {\n          if (me.worker) {\n            me.worker.kill();\n          }\n        }, this.workerTerminateTimeout);\n\n        this.worker.once('exit', function() {\n          clearTimeout(cleanExitTimeout);\n          if (me.worker) {\n            me.worker.killed = true;\n          }\n          cleanup();\n        });\n\n        if (this.worker.ready) {\n          this.worker.send(TERMINATE_METHOD_ID);\n        } else {\n          this.requestQueue.push({ message: TERMINATE_METHOD_ID });\n        }\n\n        // mark that the worker is cleaning up resources\n        // to prevent new tasks from being executed\n        this.cleaning = true;\n        return;\n      }\n      else if (typeof this.worker.terminate === 'function') {\n        this.worker.terminate(); // web worker\n        this.worker.killed = true;\n      }\n      else {\n        throw new Error('Failed to terminate worker');\n      }\n    }\n    cleanup();\n  }\n  else {\n    // we can't terminate immediately, there are still tasks being executed\n    this.terminating = true;\n  }\n};\n\n/**\n * Terminate the worker, returning a Promise that resolves when the termination has been done.\n * @param {boolean} [force=false]   If false (default), the worker is terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the worker will be\n *                                  terminated immediately.\n * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n *                                  after timeout if worker process has not been terminated.\n * @return {Promise.<WorkerHandler, Error>}\n */\nWorkerHandler.prototype.terminateAndNotify = function (force, timeout) {\n  var resolver = Promise.defer();\n  if (timeout) {\n    resolver.promise.timeout(timeout);\n  }\n  this.terminate(force, function(err, worker) {\n    if (err) {\n      resolver.reject(err);\n    } else {\n      resolver.resolve(worker);\n    }\n  });\n  return resolver.promise;\n};\n\nmodule.exports = WorkerHandler;\nmodule.exports._tryRequireWorkerThreads = tryRequireWorkerThreads;\nmodule.exports._setupProcessWorker = setupProcessWorker;\nmodule.exports._setupBrowserWorker = setupBrowserWorker;\nmodule.exports._setupWorkerThreadWorker = setupWorkerThreadWorker;\nmodule.exports.ensureWorkerThreads = ensureWorkerThreads;\n","/**\n * embeddedWorker.js contains an embedded version of worker.js.\n * This file is automatically generated,\n * changes made in this file will be overwritten.\n */\nmodule.exports = \"!function(e,n){\\\"object\\\"==typeof exports&&\\\"undefined\\\"!=typeof module?module.exports=n():\\\"function\\\"==typeof define&&define.amd?define(n):(e=\\\"undefined\\\"!=typeof globalThis?globalThis:e||self).worker=n()}(this,(function(){\\\"use strict\\\";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}var n={};var t=function(e,n){this.message=e,this.transfer=n};return function(e){var n=t,r={exit:function(){}};if(\\\"undefined\\\"!=typeof self&&\\\"function\\\"==typeof postMessage&&\\\"function\\\"==typeof addEventListener)r.on=function(e,n){addEventListener(e,(function(e){n(e.data)}))},r.send=function(e){postMessage(e)};else{if(\\\"undefined\\\"==typeof process)throw new Error(\\\"Script must be executed as a worker\\\");var o;try{o=require(\\\"worker_threads\\\")}catch(e){if(\\\"object\\\"!=typeof e||null===e||\\\"MODULE_NOT_FOUND\\\"!==e.code)throw e}if(o&&null!==o.parentPort){var i=o.parentPort;r.send=i.postMessage.bind(i),r.on=i.on.bind(i),r.exit=process.exit.bind(process)}else r.on=process.on.bind(process),r.send=function(e){process.send(e)},r.on(\\\"disconnect\\\",(function(){process.exit(1)})),r.exit=process.exit.bind(process)}function s(e){return Object.getOwnPropertyNames(e).reduce((function(n,t){return Object.defineProperty(n,t,{value:e[t],enumerable:!0})}),{})}function d(e){return e&&\\\"function\\\"==typeof e.then&&\\\"function\\\"==typeof e.catch}r.methods={},r.methods.run=function(e,n){var t=new Function(\\\"return (\\\"+e+\\\").apply(null, arguments);\\\");return t.apply(t,n)},r.methods.methods=function(){return Object.keys(r.methods)},r.terminationHandler=void 0,r.cleanupAndExit=function(e){var n=function(){r.exit(e)};if(!r.terminationHandler)return n();var t=r.terminationHandler(e);d(t)?t.then(n,n):n()};var u=null;r.on(\\\"message\\\",(function(e){if(\\\"__workerpool-terminate__\\\"===e)return r.cleanupAndExit(0);try{var t=r.methods[e.method];if(!t)throw new Error('Unknown method \\\"'+e.method+'\\\"');u=e.id;var o=t.apply(t,e.params);d(o)?o.then((function(t){t instanceof n?r.send({id:e.id,result:t.message,error:null},t.transfer):r.send({id:e.id,result:t,error:null}),u=null})).catch((function(n){r.send({id:e.id,result:null,error:s(n)}),u=null})):(o instanceof n?r.send({id:e.id,result:o.message,error:null},o.transfer):r.send({id:e.id,result:o,error:null}),u=null)}catch(n){r.send({id:e.id,result:null,error:s(n)})}})),r.register=function(e,n){if(e)for(var t in e)e.hasOwnProperty(t)&&(r.methods[t]=e[t]);n&&(r.terminationHandler=n.onTerminate),r.send(\\\"ready\\\")},r.emit=function(e){if(u){if(e instanceof n)return void r.send({id:u,isEvent:!0,payload:e.message},e.transfer);r.send({id:u,isEvent:!0,payload:e})}},e.add=r.register,e.emit=r.emit}(n),e(n)}));\\n//# sourceMappingURL=worker.min.js.map\\n\";\n","var Promise = require('./Promise');\nvar WorkerHandler = require('./WorkerHandler');\nvar environment = require('./environment');\nvar DebugPortAllocator = require('./debug-port-allocator');\nvar DEBUG_PORT_ALLOCATOR = new DebugPortAllocator();\n/**\n * A pool to manage workers\n * @param {String} [script]   Optional worker script\n * @param {WorkerPoolOptions} [options]  See docs\n * @constructor\n */\nfunction Pool(script, options) {\n  if (typeof script === 'string') {\n    this.script = script || null;\n  }\n  else {\n    this.script = null;\n    options = script;\n  }\n\n  this.workers = [];  // queue with all workers\n  this.tasks = [];    // queue with tasks awaiting execution\n\n  options = options || {};\n\n  this.forkArgs = Object.freeze(options.forkArgs || []);\n  this.forkOpts = Object.freeze(options.forkOpts || {});\n  this.workerOpts = Object.freeze(options.workerOpts || {});\n  this.workerThreadOpts = Object.freeze(options.workerThreadOpts || {})\n  this.debugPortStart = (options.debugPortStart || 43210);\n  this.nodeWorker = options.nodeWorker;\n  this.workerType = options.workerType || options.nodeWorker || 'auto'\n  this.maxQueueSize = options.maxQueueSize || Infinity;\n  this.workerTerminateTimeout = options.workerTerminateTimeout || 1000;\n\n  this.onCreateWorker = options.onCreateWorker || (() => null);\n  this.onTerminateWorker = options.onTerminateWorker || (() => null);\n\n  // configuration\n  if (options && 'maxWorkers' in options) {\n    validateMaxWorkers(options.maxWorkers);\n    this.maxWorkers = options.maxWorkers;\n  }\n  else {\n    this.maxWorkers = Math.max((environment.cpus || 4) - 1, 1);\n  }\n\n  if (options && 'minWorkers' in options) {\n    if(options.minWorkers === 'max') {\n      this.minWorkers = this.maxWorkers;\n    } else {\n      validateMinWorkers(options.minWorkers);\n      this.minWorkers = options.minWorkers;\n      this.maxWorkers = Math.max(this.minWorkers, this.maxWorkers);     // in case minWorkers is higher than maxWorkers\n    }\n    this._ensureMinWorkers();\n  }\n\n  this._boundNext = this._next.bind(this);\n\n\n  if (this.workerType === 'thread') {\n    WorkerHandler.ensureWorkerThreads();\n  }\n}\n\n\n/**\n * Execute a function on a worker.\n *\n * Example usage:\n *\n *   var pool = new Pool()\n *\n *   // call a function available on the worker\n *   pool.exec('fibonacci', [6])\n *\n *   // offload a function\n *   function add(a, b) {\n *     return a + b\n *   };\n *   pool.exec(add, [2, 4])\n *       .then(function (result) {\n *         console.log(result); // outputs 6\n *       })\n *       .catch(function(error) {\n *         console.log(error);\n *       });\n *\n * @param {String | Function} method  Function name or function.\n *                                    If `method` is a string, the corresponding\n *                                    method on the worker will be executed\n *                                    If `method` is a Function, the function\n *                                    will be stringified and executed via the\n *                                    workers built-in function `run(fn, args)`.\n * @param {Array} [params]  Function arguments applied when calling the function\n * @param {ExecOptions} [options]  Options object\n * @return {Promise.<*, Error>} result\n */\nPool.prototype.exec = function (method, params, options) {\n  // validate type of arguments\n  if (params && !Array.isArray(params)) {\n    throw new TypeError('Array expected as argument \"params\"');\n  }\n\n  if (typeof method === 'string') {\n    var resolver = Promise.defer();\n\n    if (this.tasks.length >= this.maxQueueSize) {\n      throw new Error('Max queue size of ' + this.maxQueueSize + ' reached');\n    }\n\n    // add a new task to the queue\n    var tasks = this.tasks;\n    var task = {\n      method:  method,\n      params:  params,\n      resolver: resolver,\n      timeout: null,\n      options: options\n    };\n    tasks.push(task);\n\n    // replace the timeout method of the Promise with our own,\n    // which starts the timer as soon as the task is actually started\n    var originalTimeout = resolver.promise.timeout;\n    resolver.promise.timeout = function timeout (delay) {\n      if (tasks.indexOf(task) !== -1) {\n        // task is still queued -> start the timer later on\n        task.timeout = delay;\n        return resolver.promise;\n      }\n      else {\n        // task is already being executed -> start timer immediately\n        return originalTimeout.call(resolver.promise, delay);\n      }\n    };\n\n    // trigger task execution\n    this._next();\n\n    return resolver.promise;\n  }\n  else if (typeof method === 'function') {\n    // send stringified function and function arguments to worker\n    return this.exec('run', [String(method), params]);\n  }\n  else {\n    throw new TypeError('Function or string expected as argument \"method\"');\n  }\n};\n\n/**\n * Create a proxy for current worker. Returns an object containing all\n * methods available on the worker. The methods always return a promise.\n *\n * @return {Promise.<Object, Error>} proxy\n */\nPool.prototype.proxy = function () {\n  if (arguments.length > 0) {\n    throw new Error('No arguments expected');\n  }\n\n  var pool = this;\n  return this.exec('methods')\n      .then(function (methods) {\n        var proxy = {};\n\n        methods.forEach(function (method) {\n          proxy[method] = function () {\n            return pool.exec(method, Array.prototype.slice.call(arguments));\n          }\n        });\n\n        return proxy;\n      });\n};\n\n/**\n * Creates new array with the results of calling a provided callback function\n * on every element in this array.\n * @param {Array} array\n * @param {function} callback  Function taking two arguments:\n *                             `callback(currentValue, index)`\n * @return {Promise.<Array>} Returns a promise which resolves  with an Array\n *                           containing the results of the callback function\n *                           executed for each of the array elements.\n */\n/* TODO: implement map\nPool.prototype.map = function (array, callback) {\n};\n*/\n\n/**\n * Grab the first task from the queue, find a free worker, and assign the\n * worker to the task.\n * @protected\n */\nPool.prototype._next = function () {\n  if (this.tasks.length > 0) {\n    // there are tasks in the queue\n\n    // find an available worker\n    var worker = this._getWorker();\n    if (worker) {\n      // get the first task from the queue\n      var me = this;\n      var task = this.tasks.shift();\n\n      // check if the task is still pending (and not cancelled -> promise rejected)\n      if (task.resolver.promise.pending) {\n        // send the request to the worker\n        var promise = worker.exec(task.method, task.params, task.resolver, task.options)\n          .then(me._boundNext)\n          .catch(function () {\n            // if the worker crashed and terminated, remove it from the pool\n            if (worker.terminated) {\n              return me._removeWorker(worker);\n            }\n          }).then(function() {\n            me._next(); // trigger next task in the queue\n          });\n\n        // start queued timer now\n        if (typeof task.timeout === 'number') {\n          promise.timeout(task.timeout);\n        }\n      } else {\n        // The task taken was already complete (either rejected or resolved), so just trigger next task in the queue\n        me._next();\n      }\n    }\n  }\n};\n\n/**\n * Get an available worker. If no worker is available and the maximum number\n * of workers isn't yet reached, a new worker will be created and returned.\n * If no worker is available and the maximum number of workers is reached,\n * null will be returned.\n *\n * @return {WorkerHandler | null} worker\n * @private\n */\nPool.prototype._getWorker = function() {\n  // find a non-busy worker\n  var workers = this.workers;\n  for (var i = 0; i < workers.length; i++) {\n    var worker = workers[i];\n    if (worker.busy() === false) {\n      return worker;\n    }\n  }\n\n  if (workers.length < this.maxWorkers) {\n    // create a new worker\n    worker = this._createWorkerHandler();\n    workers.push(worker);\n    return worker;\n  }\n\n  return null;\n};\n\n/**\n * Remove a worker from the pool.\n * Attempts to terminate worker if not already terminated, and ensures the minimum\n * pool size is met.\n * @param {WorkerHandler} worker\n * @return {Promise<WorkerHandler>}\n * @protected\n */\nPool.prototype._removeWorker = function(worker) {\n  var me = this;\n\n  DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n  // _removeWorker will call this, but we need it to be removed synchronously\n  this._removeWorkerFromList(worker);\n  // If minWorkers set, spin up new workers to replace the crashed ones\n  this._ensureMinWorkers();\n  // terminate the worker (if not already terminated)\n  return new Promise(function(resolve, reject) {\n    worker.terminate(false, function(err) {\n      me.onTerminateWorker({\n        forkArgs: worker.forkArgs,\n        forkOpts: worker.forkOpts,\n        workerThreadOpts: worker.workerThreadOpts,\n        script: worker.script\n      });\n      if (err) {\n        reject(err);\n      } else {\n        resolve(worker);\n      }\n    });\n  });\n};\n\n/**\n * Remove a worker from the pool list.\n * @param {WorkerHandler} worker\n * @protected\n */\nPool.prototype._removeWorkerFromList = function(worker) {\n  // remove from the list with workers\n  var index = this.workers.indexOf(worker);\n  if (index !== -1) {\n    this.workers.splice(index, 1);\n  }\n};\n\n/**\n * Close all active workers. Tasks currently being executed will be finished first.\n * @param {boolean} [force=false]   If false (default), the workers are terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the workers will be\n *                                  terminated immediately.\n * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n *                                  after timeout if worker process has not been terminated.\n * @return {Promise.<void, Error>}\n */\nPool.prototype.terminate = function (force, timeout) {\n  var me = this;\n\n  // cancel any pending tasks\n  this.tasks.forEach(function (task) {\n    task.resolver.reject(new Error('Pool terminated'));\n  });\n  this.tasks.length = 0;\n\n  var f = function (worker) {\n    DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n    this._removeWorkerFromList(worker);\n  };\n  var removeWorker = f.bind(this);\n\n  var promises = [];\n  var workers = this.workers.slice();\n  workers.forEach(function (worker) {\n    var termPromise = worker.terminateAndNotify(force, timeout)\n      .then(removeWorker)\n      .always(function() {\n        me.onTerminateWorker({\n          forkArgs: worker.forkArgs,\n          forkOpts: worker.forkOpts,\n          workerThreadOpts: worker.workerThreadOpts,\n          script: worker.script\n        });\n      });\n    promises.push(termPromise);\n  });\n  return Promise.all(promises);\n};\n\n/**\n * Retrieve statistics on tasks and workers.\n * @return {{totalWorkers: number, busyWorkers: number, idleWorkers: number, pendingTasks: number, activeTasks: number}} Returns an object with statistics\n */\nPool.prototype.stats = function () {\n  var totalWorkers = this.workers.length;\n  var busyWorkers = this.workers.filter(function (worker) {\n    return worker.busy();\n  }).length;\n\n  return {\n    totalWorkers:  totalWorkers,\n    busyWorkers:   busyWorkers,\n    idleWorkers:   totalWorkers - busyWorkers,\n\n    pendingTasks:  this.tasks.length,\n    activeTasks:   busyWorkers\n  };\n};\n\n/**\n * Ensures that a minimum of minWorkers is up and running\n * @protected\n */\nPool.prototype._ensureMinWorkers = function() {\n  if (this.minWorkers) {\n    for(var i = this.workers.length; i < this.minWorkers; i++) {\n      this.workers.push(this._createWorkerHandler());\n    }\n  }\n};\n\n/**\n * Helper function to create a new WorkerHandler and pass all options.\n * @return {WorkerHandler}\n * @private\n */\nPool.prototype._createWorkerHandler = function () {\n  const overriddenParams = this.onCreateWorker({\n    forkArgs: this.forkArgs,\n    forkOpts: this.forkOpts,\n    workerOpts: this.workerOpts,\n    workerThreadOpts: this.workerThreadOpts,\n    script: this.script\n  }) || {};\n\n  return new WorkerHandler(overriddenParams.script || this.script, {\n    forkArgs: overriddenParams.forkArgs || this.forkArgs,\n    forkOpts: overriddenParams.forkOpts || this.forkOpts,\n    workerOpts: overriddenParams.workerOpts || this.workerOpts,\n    workerThreadOpts: overriddenParams.workerThreadOpts || this.workerThreadOpts,\n    debugPort: DEBUG_PORT_ALLOCATOR.nextAvailableStartingAt(this.debugPortStart),\n    workerType: this.workerType,\n    workerTerminateTimeout: this.workerTerminateTimeout,\n  });\n}\n\n/**\n * Ensure that the maxWorkers option is an integer >= 1\n * @param {*} maxWorkers\n * @returns {boolean} returns true maxWorkers has a valid value\n */\nfunction validateMaxWorkers(maxWorkers) {\n  if (!isNumber(maxWorkers) || !isInteger(maxWorkers) || maxWorkers < 1) {\n    throw new TypeError('Option maxWorkers must be an integer number >= 1');\n  }\n}\n\n/**\n * Ensure that the minWorkers option is an integer >= 0\n * @param {*} minWorkers\n * @returns {boolean} returns true when minWorkers has a valid value\n */\nfunction validateMinWorkers(minWorkers) {\n  if (!isNumber(minWorkers) || !isInteger(minWorkers) || minWorkers < 0) {\n    throw new TypeError('Option minWorkers must be an integer number >= 0');\n  }\n}\n\n/**\n * Test whether a variable is a number\n * @param {*} value\n * @returns {boolean} returns true when value is a number\n */\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Test whether a number is an integer\n * @param {number} value\n * @returns {boolean} Returns true if value is an integer\n */\nfunction isInteger(value) {\n  return Math.round(value) == value;\n}\n\nmodule.exports = Pool;\n","'use strict';\n\nvar MAX_PORTS = 65535;\nmodule.exports = DebugPortAllocator;\nfunction DebugPortAllocator() {\n  this.ports = Object.create(null);\n  this.length = 0;\n}\n\nDebugPortAllocator.prototype.nextAvailableStartingAt = function(starting) {\n  while (this.ports[starting] === true) {\n    starting++;\n  }\n\n  if (starting >= MAX_PORTS) {\n    throw new Error('WorkerPool debug port limit reached: ' + starting + '>= ' + MAX_PORTS );\n  }\n\n  this.ports[starting] = true;\n  this.length++;\n  return starting;\n};\n\nDebugPortAllocator.prototype.releasePort = function(port) {\n  delete this.ports[port];\n  this.length--;\n};\n\n","/**\n * The helper class for transferring data from the worker to the main thread.\n *\n * @param {Object} message The object to deliver to the main thread.\n * @param {Object[]} transfer An array of transferable Objects to transfer ownership of.\n */\nfunction Transfer(message, transfer) {\n  this.message = message;\n  this.transfer = transfer;\n}\n\nmodule.exports = Transfer;\n","/**\n * worker must be started as a child process or a web worker.\n * It listens for RPC messages from the parent process.\n */\nvar Transfer = require('./transfer');\n\n/**\n * Special message sent by parent which causes the worker to terminate itself.\n * Not a \"message object\"; this string is the entire message.\n */\nvar TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n// var nodeOSPlatform = require('./environment').nodeOSPlatform;\n\n// create a worker API for sending and receiving messages which works both on\n// node.js and in the browser\nvar worker = {\n  exit: function() {}\n};\nif (typeof self !== 'undefined' && typeof postMessage === 'function' && typeof addEventListener === 'function') {\n  // worker in the browser\n  worker.on = function (event, callback) {\n    addEventListener(event, function (message) {\n      callback(message.data);\n    })\n  };\n  worker.send = function (message) {\n    postMessage(message);\n  };\n}\nelse if (typeof process !== 'undefined') {\n  // node.js\n\n  var WorkerThreads;\n  try {\n    WorkerThreads = require('worker_threads');\n  } catch(error) {\n    if (typeof error === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n      // no worker_threads, fallback to sub-process based workers\n    } else {\n      throw error;\n    }\n  }\n\n  if (WorkerThreads &&\n    /* if there is a parentPort, we are in a WorkerThread */\n    WorkerThreads.parentPort !== null) {\n    var parentPort  = WorkerThreads.parentPort;\n    worker.send = parentPort.postMessage.bind(parentPort);\n    worker.on = parentPort.on.bind(parentPort);\n    worker.exit = process.exit.bind(process);\n  } else {\n    worker.on = process.on.bind(process);\n    // ignore transfer argument since it is not supported by process\n    worker.send = function (message) {\n      process.send(message);\n    };\n    // register disconnect handler only for subprocess worker to exit when parent is killed unexpectedly\n    worker.on('disconnect', function () {\n      process.exit(1);\n    });\n    worker.exit = process.exit.bind(process);\n  }\n}\nelse {\n  throw new Error('Script must be executed as a worker');\n}\n\nfunction convertError(error) {\n  return Object.getOwnPropertyNames(error).reduce(function(product, name) {\n    return Object.defineProperty(product, name, {\n\tvalue: error[name],\n\tenumerable: true\n    });\n  }, {});\n}\n\n/**\n * Test whether a value is a Promise via duck typing.\n * @param {*} value\n * @returns {boolean} Returns true when given value is an object\n *                    having functions `then` and `catch`.\n */\nfunction isPromise(value) {\n  return value && (typeof value.then === 'function') && (typeof value.catch === 'function');\n}\n\n// functions available externally\nworker.methods = {};\n\n/**\n * Execute a function with provided arguments\n * @param {String} fn     Stringified function\n * @param {Array} [args]  Function arguments\n * @returns {*}\n */\nworker.methods.run = function run(fn, args) {\n  var f = new Function('return (' + fn + ').apply(null, arguments);');\n  return f.apply(f, args);\n};\n\n/**\n * Get a list with methods available on this worker\n * @return {String[]} methods\n */\nworker.methods.methods = function methods() {\n  return Object.keys(worker.methods);\n};\n\n/**\n * Custom handler for when the worker is terminated.\n */\nworker.terminationHandler = undefined;\n\n/**\n * Cleanup and exit the worker.\n * @param {Number} code \n * @returns \n */\nworker.cleanupAndExit = function(code) {\n  var _exit = function() {\n    worker.exit(code);\n  }\n\n  if(!worker.terminationHandler) {\n    return _exit();\n  }\n\n  var result = worker.terminationHandler(code);\n  if (isPromise(result)) {\n    result.then(_exit, _exit);\n  } else {\n    _exit();\n  }\n}\n\nvar currentRequestId = null;\n\nworker.on('message', function (request) {\n  if (request === TERMINATE_METHOD_ID) {\n    return worker.cleanupAndExit(0);\n  }\n  try {\n    var method = worker.methods[request.method];\n\n    if (method) {\n      currentRequestId = request.id;\n      \n      // execute the function\n      var result = method.apply(method, request.params);\n\n      if (isPromise(result)) {\n        // promise returned, resolve this and then return\n        result\n            .then(function (result) {\n              if (result instanceof Transfer) {\n                worker.send({\n                  id: request.id,\n                  result: result.message,\n                  error: null\n                }, result.transfer);\n              } else {\n                worker.send({\n                  id: request.id,\n                  result: result,\n                  error: null\n                });\n              }\n              currentRequestId = null;\n            })\n            .catch(function (err) {\n              worker.send({\n                id: request.id,\n                result: null,\n                error: convertError(err)\n              });\n              currentRequestId = null;\n            });\n      }\n      else {\n        // immediate result\n        if (result instanceof Transfer) {\n          worker.send({\n            id: request.id,\n            result: result.message,\n            error: null\n          }, result.transfer);\n        } else {\n          worker.send({\n            id: request.id,\n            result: result,\n            error: null\n          });\n        }\n\n        currentRequestId = null;\n      }\n    }\n    else {\n      throw new Error('Unknown method \"' + request.method + '\"');\n    }\n  }\n  catch (err) {\n    worker.send({\n      id: request.id,\n      result: null,\n      error: convertError(err)\n    });\n  }\n});\n\n/**\n * Register methods to the worker\n * @param {Object} [methods]\n * @param {WorkerRegisterOptions} [options]\n */\nworker.register = function (methods, options) {\n\n  if (methods) {\n    for (var name in methods) {\n      if (methods.hasOwnProperty(name)) {\n        worker.methods[name] = methods[name];\n      }\n    }\n  }\n\n  if (options) {\n    worker.terminationHandler = options.onTerminate;\n  }\n\n  worker.send('ready');\n};\n\nworker.emit = function (payload) {\n  if (currentRequestId) {\n    if (payload instanceof Transfer) {\n      worker.send({\n        id: currentRequestId,\n        isEvent: true,\n        payload: payload.message\n      }, payload.transfer);\n      return;\n    }\n\n    worker.send({\n      id: currentRequestId,\n      isEvent: true,\n      payload\n    });\n  }\n};\n\nif (typeof exports !== 'undefined') {\n  exports.add = worker.register;\n  exports.emit = worker.emit;\n}\n","var environment = require('./environment');\n\n/**\n * Create a new worker pool\n * @param {string} [script]\n * @param {WorkerPoolOptions} [options]\n * @returns {Pool} pool\n */\nexports.pool = function pool(script, options) {\n  var Pool = require('./Pool');\n\n  return new Pool(script, options);\n};\n\n/**\n * Create a worker and optionally register a set of methods to the worker.\n * @param {Object} [methods]\n * @param {WorkerRegisterOptions} [options]\n */\nexports.worker = function worker(methods, options) {\n  var worker = require('./worker');\n  worker.add(methods, options);\n};\n\n/**\n * Sends an event to the parent worker pool.\n * @param {any} payload \n */\nexports.workerEmit = function workerEmit(payload) {\n  var worker = require('./worker');\n  worker.emit(payload);\n};\n\n/**\n * Create a promise.\n * @type {Promise} promise\n */\nexports.Promise = require('./Promise');\n\n/**\n * Create a transfer object.\n * @type {Transfer} transfer\n */\nexports.Transfer = require('./transfer');\n\nexports.platform = environment.platform;\nexports.isMainThread = environment.isMainThread;\nexports.cpus = environment.cpus;"],"names":["isNode","nodeProcess","versions","node","module","exports","platform","process","worker_threads","require","isMainThread","connected","Window","cpus","self","navigator","hardwareConcurrency","length","Promise","handler","parent","me","this","SyntaxError","_onSuccess","_onFail","resolved","rejected","pending","_process","onSuccess","onFail","push","then","resolve","reject","s","_then","f","_resolve","result","forEach","fn","_reject","error","cancel","CancellationError","timeout","delay","timer","setTimeout","TimeoutError","always","clearTimeout","callback","res","message","stack","Error","prototype","all","promises","remaining","results","p","i","defer","resolver","promise","constructor","name","_Promise","validateOptions","options","allowedOptionNames","objectName","optionNames","Object","keys","unknownOptionName","find","optionName","includes","illegalOptionName","allowedOptionName","workerOptsNames","forkOptsNames","workerThreadOptsNames","require$$0","environment","require$$1","require$$2","TERMINATE_METHOD_ID","ensureWorkerThreads","WorkerThreads","tryRequireWorkerThreads","ensureWebWorker","Worker","code","setupBrowserWorker","script","workerOpts","worker","isBrowserWorker","on","event","addEventListener","data","send","transfer","postMessage","setupWorkerThreadWorker","workerThreadOptions","stdout","stderr","isWorkerThread","kill","terminate","disconnect","setupProcessWorker","child_process","forkOpts","fork","forkArgs","call","isChildProcess","resolveForkOptions","opts","processExecArgv","execArgv","join","inspectorActive","indexOf","debugBrk","debugPort","arg","assign","concat","WorkerHandler","_options","onError","id","terminated","processing","undefined","create","Blob","window","URL","createObjectURL","blob","embeddedWorker","type","__dirname","getDefaultWorker","workerType","workerThreadOpts","setupWorker","workerTerminateTimeout","ready","requestQueue","response","request","splice","dispatchQueuedRequests","task","isEvent","payload","terminating","obj","temp","props","objectToError","exitCode","signalCode","spawnargs","spawnfile","cleaning","terminationHandler","lastId","methods","exec","method","params","catch","terminateAndNotify","err","busy","force","cleanup","removeAllListeners","killed","cleanExitTimeout","once","WorkerHandlerModule","_tryRequireWorkerThreads","_setupProcessWorker","_setupBrowserWorker","_setupWorkerThreadWorker","DEBUG_PORT_ALLOCATOR","DebugPortAllocator","ports","debugPortAllocator","nextAvailableStartingAt","starting","releasePort","port","require$$3","Pool","workers","tasks","freeze","debugPortStart","nodeWorker","maxQueueSize","Infinity","onCreateWorker","onTerminateWorker","maxWorkers","isNumber","isInteger","TypeError","validateMaxWorkers","Math","max","minWorkers","validateMinWorkers","_ensureMinWorkers","_boundNext","_next","bind","value","round","Array","isArray","originalTimeout","String","proxy","arguments","pool","slice","_getWorker","shift","_removeWorker","_createWorkerHandler","_removeWorkerFromList","index","removeWorker","termPromise","stats","totalWorkers","busyWorkers","filter","idleWorkers","pendingTasks","activeTasks","overriddenParams","Pool_1","Transfer","exit","parentPort","convertError","getOwnPropertyNames","reduce","product","defineProperty","enumerable","isPromise","run","args","Function","apply","cleanupAndExit","_exit","currentRequestId","register","hasOwnProperty","onTerminate","emit","add","src","workerEmit","require$$4"],"mappings":"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"}